#include <iostream>
#include <vector>
#include <ctime>
#include <iterator>
#include <algorithm>
using namespace std;





class Card{
protected:
	vector <int> vec1;                            // ????? ? ??????!
	vector <int> vec2;
	vector <int> vec3;
	vector <int> vec4;
	bool Flagvec[4];
	bool FlagTrump[4]; //???? ?? ??????
	int Choise4;

public:


	Card(){
		for (int i = 0; i < 4; i++)
		{
			FlagTrump[i] = false;
			Flagvec[i] = false;
		}
		Choise4 = rand() % 4;
	}


	void InitialCards()            //????????????? ???? ? ?????? ??????
	{
		for (unsigned int i = 0; i<9; i++)
		{
			if (FlagTrump[0] == false) vec1.insert(vec1.end(), i + 6);
			else vec1.insert(vec1.end(), i + 15);
			if (FlagTrump[1] == false) vec2.insert(vec2.end(), i + 6);
			else vec2.insert(vec2.end(), i + 15);
			if (FlagTrump[2] == false) vec3.insert(vec3.end(), i + 6);
			else vec3.insert(vec3.end(), i + 15);
			if (FlagTrump[3] == false) vec4.insert(vec4.end(), i + 6);
			else vec4.insert(vec4.end(), i + 15);


		}
	}

	void TrumpCard() //????? ??????
	{
		
		if (0 == Choise4) FlagTrump[0] = true;
		if (1 == Choise4) FlagTrump[1] = true;
		if (2 == Choise4) FlagTrump[2] = true;
		if (3 == Choise4) FlagTrump[3] = true;

	}

};

class Player : public Card{
public:
	vector <int> vecplayer1;                //?????, ??????? ????????? ??????
	vector <int> vecplayer2;
	vector <int> vecplayer3;
	vector <int> vecplayer4;


	Player(){
		vecplayer1.reserve(6);
		vecplayer2.reserve(6);
		vecplayer3.reserve(6);
		vecplayer4.reserve(6);
	}

	void ShowCard() //??????? ?? ????? ????? ??????????
	{
		cout << "Player cards!" << endl;
		cout << "\nFirst vector   ";
		for (unsigned int i = 0; i < vecplayer1.size(); i++)
		{
			if (vecplayer1.at(i)!=0) cout << vecplayer1.at(i)<<"  ";
		}
		cout << "\n2 vector   ";
		for (unsigned int i = 0; i < vecplayer2.size(); i++)
		{
			if (vecplayer2.at(i) != 0) cout << vecplayer2.at(i) << "  ";
		}
		cout << "\n3 vector   ";
		for (unsigned int i = 0; i < vecplayer3.size(); i++)
		{
			if (vecplayer3.at(i) != 0) cout << vecplayer3.at(i) << "  ";
		}
		cout << "\n4 vector   ";
		for (unsigned int i = 0; i < vecplayer4.size(); i++)
		{
			if (vecplayer4.at(i) != 0) cout << vecplayer4.at(i) << "  ";
		}
		cout << "\n" << endl;
	}

	
};


class Computer : public Card{
public:
	vector <int> vecComp1;                   //????? ??????????
	vector <int> vecComp2;
	vector <int> vecComp3;
	vector <int> vecComp4;

	void ShowCard()
	{
		cout << "Computer cards!" << endl;
		cout << "\nFirst vector   ";
		for (unsigned int i = 0; i <vecComp1.size(); i++)
		{
			if (vecComp1.at(i) != 0) cout << vecComp1.at(i) << "  ";
		}
		cout << "\n2 vector   ";
		for (unsigned int i = 0; i < vecComp2.size(); i++)
		{
			if (vecComp2.at(i) != 0) cout << vecComp2.at(i) << "  ";
		}
		cout << "\n3 vector   ";
		for (unsigned int i = 0; i < vecComp3.size(); i++)
		{
			if (vecComp3.at(i) != 0) cout << vecComp3.at(i) << "  ";
		}
		cout << "\n4 vector   ";
		for (unsigned int i = 0; i < vecComp4.size(); i++)
		{
			if (vecComp4.at(i) != 0) cout << vecComp4.at(i) << "  ";
		}
		cout << "\n" << endl;
	}
};

class Game : public Card{
public:
	vector <int> GameCard1;                  //????? ??????? ????????? ?? ????(? ????)
	vector <int> GameCard2;
	vector <int> GameCard3;
	vector <int> GameCard4;
	vector <int> GameCardF;    //?? ???? ???????? ?????!
	bool FlagTemp[4];       //??? ???????????, ? ????? ????????-????? ?????? ?????? ?????
	vector <int> Temp1;  // ???????? ????? ?????
	vector <int> Temp2;
	vector <int> Temp3;
	vector <int> Temp4;
	Player player;  //?????? ??????
	Computer computer; //?????? ??????????
	int Choise1;
	bool FlagF[4]; //???????
	bool FlagMove[4]; //??? ???????????, ????? ?? ?????? ???????????? ?????? ??? ???
	bool FlagNext; //???????? ???????? ??? ???, ???? ??? ???
	vector <int>::iterator it;
	vector <int>::iterator it2;
	vector <int> Merged1;
	vector <int> Merged2;
	vector <int> Merged3;
	vector <int> Merged4;
	vector <int> TempTemp; //????? ?? ???????? ????? ???????????
	bool FlagGiveUpComp;
	bool FlagPlayerGiveUp;
	bool FlagEndCards; //??????????? ?? ????? ??????
	bool FlagCompEmpty[4];

public:
	bool FlagCanAdd;
	bool FlagCanCompAdd;
	int counter; //????? ??? ????? ??????, ???? ????? 1, ?? ?????? ???????? ?????? ??????

	bool GetFlagEndCards(){
		return FlagEndCards;
	}

	Game()
	{
		for (int i = 0; i < 4; i++)
		{
			FlagMove[i] = false;
			FlagF[i] = false;
			FlagCompEmpty[i] = false;
		}
		FlagNext = false;
		FlagCanAdd = false;
		FlagCanCompAdd = false;
		FlagGiveUpComp = false;
		FlagPlayerGiveUp = false;
		FlagEndCards = false;
		counter = 0;
	}

	void GameCardClearer(){
		GameCard1.clear();
		GameCard2.clear();
		GameCard3.clear();
		GameCard4.clear();
	
	}
	void DealCardsForPlayer()                  //??????? ???? ? ?????? ? ?????
	{
		if (vec1.empty() && vec2.empty() && vec3.empty() && vec4.empty()) { cerr << "No more cards!!!" << endl; FlagEndCards = true; return; }
		if (vec1.empty()) cerr << "vec1 empty" << endl;
		if (vec2.empty()) cerr << "vec2 empty" << endl;
		if (vec3.empty()) cerr << "vec3 empty" << endl;
		if (vec4.empty()) cerr << "vec4 empty" << endl;
		if (vec1.empty()) { Flagvec[0] = true; }
		if (vec2.empty()) {	Flagvec[1] = true;}
		if (vec3.empty()) {	Flagvec[2] = true;	}
		if (vec4.empty()) {	Flagvec[3] = true;}
		int TotalSize = player.vecplayer1.size() + player.vecplayer2.size() + player.vecplayer3.size() + player.vecplayer4.size();
		int TotalCompSize = computer.vecComp1.size() + computer.vecComp2.size() + computer.vecComp3.size() + computer.vecComp4.size();
		cerr << "First" << endl;
		while (TotalSize < 6||TotalCompSize<6){   //????? ????????? ???? ? ?????? ??? ? ????? ?????? ??? 6 ???? ?? ?????
			if (TotalSize < 6&&FlagEndCards==false){ //???? ? ?????? ???? ?????? 6, ??????? ?????? , ? ???? ??? ?????????
				int Suit;
				int Choise = rand() % 4;
				switch (Choise)
				{
				case 0: if (vec1.empty()) { Flagvec[0] = true; DealCardsForPlayer(); } Suit = vec1.size(); Choise = rand() % Suit;
					Choise1 = vec1[Choise]; player.vecplayer1.push_back(Choise1); 
					it = vec1.begin() + Choise; vec1.erase(it); vector <int>(vec1).swap(vec1); break;
				case 1: if (vec2.empty()) { Flagvec[1] = true; DealCardsForPlayer(); } Suit = vec2.size();  Choise = rand() % Suit;
					Choise1 = vec2[Choise]; player.vecplayer2.push_back(Choise1); 
					it = vec2.begin() + Choise; vec2.erase(it); vector <int>(vec2).swap(vec2); break;
				case 2:if (vec3.empty()) { Flagvec[2] = true; DealCardsForPlayer(); } Suit = vec3.size();  Choise = rand() % Suit;
					Choise1 = vec3[Choise]; player.vecplayer3.push_back(Choise1); 
					it = vec3.begin() + Choise; vec3.erase(it); vector <int>(vec3).swap(vec3); break;
				case 3:if (vec4.empty()) { Flagvec[3] = true; DealCardsForPlayer(); } Suit = vec4.size();  Choise = rand() % Suit;
					Choise1 = vec4[Choise]; player.vecplayer4.push_back(Choise1); 
					it = vec4.begin() + Choise; vec4.erase(it); vector <int>(vec4).swap(vec4); break;
				}
				TotalSize = player.vecplayer1.size() + player.vecplayer2.size() + player.vecplayer3.size() + player.vecplayer4.size();
			}
			if (TotalCompSize < 6&&FlagEndCards == false){ //???? ? ????? ?????? 6, ??????? ????? , ? ???? ??? ?????????
				int Suit;
				int Choise;
			//	if (Flagvec[0] == true && Flagvec[1] == true && Flagvec[2] == true && Flagvec[3] == true) return;
				while (1){
					Choise = rand() % 4;
					if (Flagvec[Choise] == false) break;
				}
				cout << "Choise" << Choise << endl;
				switch (Choise)
				{
				case 0: if (vec1.empty()) { Flagvec[0] = true; DealCardsForPlayer(); }
					Suit = vec1.size();  Choise = rand() % Suit;
					Choise1 = vec1[Choise]; computer.vecComp1.push_back(Choise1);
					it = vec1.begin() + Choise; vec1.erase(it); vector <int>(vec1).swap(vec1); break;
				case 1: if (vec2.empty()) { Flagvec[1] = true; DealCardsForPlayer(); }
					Suit = vec2.size() ; Choise = rand() % Suit;
					Choise1 = vec2[Choise]; computer.vecComp2.push_back(Choise1);
					it = vec2.begin() + Choise; vec2.erase(it); vector <int>(vec2).swap(vec2); break;
				case 2: if (vec3.empty()) { Flagvec[2] = true; DealCardsForPlayer(); }
					Suit = vec3.size() ;   Choise = rand() % Suit;
					Choise1 = vec3[Choise]; computer.vecComp3.push_back(Choise1);
					it = vec3.begin() + Choise; vec3.erase(it); vector <int>(vec3).swap(vec3); break;
				case 3: if (vec4.empty()) { Flagvec[3] = true; DealCardsForPlayer(); }
					Suit = vec4.size() ;   Choise = rand() % Suit;
					Choise1 = vec4[Choise];computer.vecComp4.push_back(Choise1);
					it = vec4.begin() + Choise; vec4.erase(it); vector <int>(vec4).swap(vec4); break;
				}
				TotalCompSize = computer.vecComp1.size() + computer.vecComp2.size() + computer.vecComp3.size() + computer.vecComp4.size();
			}
		}
		SortCards();
	//	player.ShowCard();
		//computer.ShowCard();
	}


	void SortCards()            //?????????? ???? ??? ????????
	{    
		sort(player.vecplayer1.begin(), player.vecplayer1.end());
		sort(player.vecplayer2.begin(), player.vecplayer2.end());
		sort(player.vecplayer3.begin(), player.vecplayer3.end());
		sort(player.vecplayer4.begin(), player.vecplayer4.end());
		sort(computer.vecComp1.begin(), computer.vecComp1.end());
		sort(computer.vecComp2.begin(), computer.vecComp2.end());
		sort(computer.vecComp3.begin(), computer.vecComp3.end());
		sort(computer.vecComp4.begin(), computer.vecComp4.end());
		sort(Temp1.begin(), Temp1.end());
		sort(Temp2.begin(), Temp2.end());
		sort(Temp3.begin(), Temp3.end());
		sort(Temp4.begin(), Temp4.end());
	}

	void PlayerAttack() //x?? ??????
	{
		for (int i = 0; i < 4; i++)    //????? ??????????.
		{
		FlagMove[i] = false;
		}
		cout << "Choise suit! " << endl;
		char Key;
		int index;
		cin >> Key;
		switch (Key)
		{
		case '1': cout << "You'he choose vec1! Please, press index of card you want to call!" << endl;
			cin >> index; if (!player.vecplayer1.empty()) { GameCard1.push_back(player.vecplayer1.at(index-1)); 
			GameCardF.push_back(GameCard1.at(0));
			cout << "GameCard1 = " << GameCard1.at(0) << endl;
			it2 = player.vecplayer1.begin() + index-1; player.vecplayer1.erase(it2); vector <int>(player.vecplayer1).swap(player.vecplayer1);
			FlagMove[0] = true; break;
			}
			else { cout << "We haven't card with such index!" << endl; PlayerAttack(); }
			break;
		case '2':cout << "You'he choose vec2! Please, press index of card you want to call!" << endl;
			cin >> index; if (!player.vecplayer2.empty()){ GameCard2.push_back(player.vecplayer2.at(index-1));
			GameCardF.push_back(GameCard2.at(0));
			cout << "GameCard2 = " << GameCard2.at(0) << endl;
			it2 = player.vecplayer2.begin() + index - 1; player.vecplayer2.erase(it2); vector <int>(player.vecplayer2).swap(player.vecplayer2);
			FlagMove[1] = true; break;
		}
			else{ cout << "We haven't card with such index!" << endl; PlayerAttack(); } break;
		case '3':cout << "You'he choose vec3! Please, press index of card you want to call!" << endl;
			cin >> index; if (!player.vecplayer3.empty()){ GameCard3.push_back(player.vecplayer3.at(index-1));
			GameCardF.push_back(GameCard3.at(0));
			cout << "GameCard3 = " << GameCard3.at(0) << endl;
			it2 = player.vecplayer3.begin() + index - 1; player.vecplayer3.erase(it2); vector <int>(player.vecplayer3).swap(player.vecplayer3);
			FlagMove[2] = true; break;
			}
			else { cout << "We're haven't card with such index!" << endl; PlayerAttack(); } break;
		case '4':cout << "You'he choose vec4! Please, press index of card you want to call!" << endl;
			cin >> index; if (!player.vecplayer4.empty()) { GameCard4.push_back(player.vecplayer4.at(index-1));
			GameCardF.push_back(GameCard4.at(0));
			cout << "GameCard4 = " << GameCard4.at(0) << endl;
			it2 = player.vecplayer4.begin() + index - 1; player.vecplayer4.erase(it2); vector <int>(player.vecplayer4).swap(player.vecplayer4); 
			FlagMove[3] = true; break;
			}
			else { cout << "We haven't card with such index!" << endl; PlayerAttack(); } break;
		}
		system("pause");
		system("cls");
		
		player.ShowCard();
		computer.ShowCard();
	}

	void ComputerMove()
	{
		SortCards();
		if ((FlagNext==false&&FlagMove[0] == true)||(FlagNext==false&&(0==Choise4))) 
		{
		//	cout << "  if ((FlagNext==false&&FlagMove[0] == true)||(FlagNext==false&&(0==Choise4)))   " << endl;
			if (!computer.vecComp1.empty())
			{
				for (unsigned int i = 0; i < computer.vecComp1.size(); i++)
				{
				//	cout << "0" << endl;
					if (!GameCard1.empty()){	cout << GameCard1[0] << endl;
				//	cout << "if (computer.vecComp1[i]>GameCard1[0])" << computer.vecComp1[i] << " " << GameCard1[0] << endl;
					int Tempo01 = computer.vecComp1[i];
					int TempoCard01 = GameCard1[0];
				

					if (Tempo01>TempoCard01)//???? ????? ?????? ???, ??????? ????? ?? ????, ?? ????? ??.
					{
					//	cout << "computer.vecComp1.at(i)" << computer.vecComp1.at(i) << endl;
						Temp1.push_back(GameCard1[0]);  //???????? ? ????????? ???????? ????? ????
						Temp1.push_back(computer.vecComp1.at(i));
						it2 = computer.vecComp1.begin() + i; computer.vecComp1.erase(it2); vector <int>(computer.vecComp1).swap(computer.vecComp1); //??????? ?????, ??????? ????, ? ???????
						//	GameCard1.clear(); //??????? ? ???? ?????
						FlagNext = true; //??? ??????, ??? ??? ??????!
					//	if (FlagNext == true) cout << "FlagNext=true for i =  " << i << endl;
					//	else cout << "FlagNext=false for i =  " << i << endl;
						break;
					}
					else continue;
					} //???? ????? ????????,?? ???????? ? ??????? CardF
					else 
					{
						FlagF[0] = true;
						int Tempo01 = computer.vecComp1[i];
						int TempoCard01 = GameCardF[0];


						if (Tempo01>TempoCard01)//???? ????? ?????? ???, ??????? ????? ?? ????, ?? ????? ??.
						{
						//	cout << "computer.vecComp1.at(i)" << computer.vecComp1.at(i) << endl;
							Temp1.push_back(GameCardF[0]);  //???????? ? ????????? ???????? ????? ????
							Temp1.push_back(computer.vecComp1.at(i));
							it2 = computer.vecComp1.begin() + i; computer.vecComp1.erase(it2); vector <int>(computer.vecComp1).swap(computer.vecComp1); //??????? ?????, ??????? ????, ? ???????
							//	GameCard1.clear(); //??????? ? ???? ?????
							FlagNext = true; //??? ??????, ??? ??? ??????!
					//		if (FlagNext == true) cout << "FlagNext=true for i =  " << i << endl;
					//		else cout << "FlagNext=false for i =  " << i << endl;
							break;
						}
						else continue;
					}
					}
			}
			else cout << "vecComp1 is empty" << endl;
		}

		if ((FlagNext == false && FlagMove[1] == true) || (FlagNext == false && (1 == Choise4))) //
		{
		//	cout << "if ((FlagNext == false && FlagMove[1] == true) || (FlagNext == false && (1 == Choise4)))" << endl;
			if (!computer.vecComp2.empty())
			{
				for (unsigned int i = 0; i < computer.vecComp2.size(); i++)
				{
				//	cout << "1" << endl;
					if (!GameCard2.empty()){
					//	cout << GameCard2[0] << endl;
					//	cout << "if (computer.vecComp2[i]>GameCard2[0])" << computer.vecComp2[i] << " " << GameCard2[0] << endl;
						int Tempo02 = computer.vecComp2[i];
						int TempoCard02 = GameCard2[0];


						if (Tempo02>TempoCard02)//???? ????? ?????? ???, ??????? ????? ?? ????, ?? ????? ??.
						{
						//	cout << "computer.vecComp2.at(i)" << computer.vecComp2.at(i) << endl;
							Temp2.push_back(GameCard2[0]);  //???????? ? ????????? ???????? ????? ????
							Temp2.push_back(computer.vecComp2.at(i));
							it2 = computer.vecComp2.begin() + i; computer.vecComp2.erase(it2); vector <int>(computer.vecComp2).swap(computer.vecComp2); //??????? ?????, ??????? ????, ? ???????
							//	GameCard1.clear(); //??????? ? ???? ?????
							FlagNext = true; //??? ??????, ??? ??? ??????!
						//	if (FlagNext == true) cout << "FlagNext=true for i =  " << i << endl;
						//	else cout << "FlagNext=false for i =  " << i << endl;
							break;
						}
						else continue;
					} //???? ????? ????????,?? ???????? ? ??????? CardF
					else
					{
						FlagF[1] = true;
						int Tempo02 = computer.vecComp2[i];
						int TempoCard02 = GameCardF[0];


						if (Tempo02>TempoCard02)//???? ????? ?????? ???, ??????? ????? ?? ????, ?? ????? ??.
						{
						//	cout << "computer.vecComp2.at(i)" << computer.vecComp2.at(i) << endl;
							Temp2.push_back(GameCardF[0]);  //???????? ? ????????? ???????? ????? ????
							Temp2.push_back(computer.vecComp2.at(i));
							it2 = computer.vecComp2.begin() + i; computer.vecComp2.erase(it2); vector <int>(computer.vecComp2).swap(computer.vecComp2); //??????? ?????, ??????? ????, ? ???????
							//	GameCard1.clear(); //??????? ? ???? ?????
							FlagNext = true; //??? ??????, ??? ??? ??????!
					//		if (FlagNext == true) cout << "FlagNext=true for i =  " << i << endl;
					//		else cout << "FlagNext=false for i =  " << i << endl;
							break;
						}
						else continue;
					}
				}
			}
			else cout << "vecComp2 is empty" << endl;
		}


		if ((FlagNext == false && FlagMove[2] == true) || (FlagNext == false && (2 == Choise4))) //
		{
			//cout << "if ((FlagNext == false && FlagMove[2] == true) || (FlagNext == false && (2 == Choise4)))" << endl;
			if (!computer.vecComp3.empty())
			{
				for (unsigned int i = 0; i < computer.vecComp3.size(); i++)
				{
		//			cout << "2" << endl;
					if (!GameCard3.empty()){
					//	cout << GameCard3[0] << endl;
					//	cout << "if (computer.vecComp3[i]>GameCard3[0])" << computer.vecComp3[i] << " " << GameCard3[0] << endl;
						int Tempo03 = computer.vecComp3[i];
						int TempoCard03 = GameCard3[0];


						if (Tempo03>TempoCard03)//???? ????? ?????? ???, ??????? ????? ?? ????, ?? ????? ??.
						{
						//	cout << "computer.vecComp3.at(i)" << computer.vecComp3.at(i) << endl;
							Temp3.push_back(GameCard3[0]);  //???????? ? ????????? ???????? ????? ????
							Temp3.push_back(computer.vecComp3.at(i));
							it2 = computer.vecComp3.begin() + i; computer.vecComp3.erase(it2); vector <int>(computer.vecComp3).swap(computer.vecComp3); //??????? ?????, ??????? ????, ? ???????
							//	GameCard1.clear(); //??????? ? ???? ?????
							FlagNext = true; //??? ??????, ??? ??? ??????!
						//	if (FlagNext == true) cout << "FlagNext=true for i =  " << i << endl;
						//	else cout << "FlagNext=false for i =  " << i << endl;
							break;
						}
						else continue;
					} //???? ????? ????????,?? ???????? ? ??????? CardF
					else
					{
						FlagF[2] = true;
						int Tempo03 = computer.vecComp3[i];
						int TempoCard03 = GameCardF[0];


						if (Tempo03>TempoCard03)//???? ????? ?????? ???, ??????? ????? ?? ????, ?? ????? ??.
						{
						//	cout << "computer.vecComp3.at(i)" << computer.vecComp3.at(i) << endl;
							Temp3.push_back(GameCardF[0]);  //???????? ? ????????? ???????? ????? ????
							Temp3.push_back(computer.vecComp3.at(i));
							it2 = computer.vecComp3.begin() + i; computer.vecComp3.erase(it2); vector <int>(computer.vecComp3).swap(computer.vecComp3); //??????? ?????, ??????? ????, ? ???????
							//	GameCard1.clear(); //??????? ? ???? ?????
							FlagNext = true; //??? ??????, ??? ??? ??????!
						//	if (FlagNext == true) cout << "FlagNext=true for i =  " << i << endl;
						//	else cout << "FlagNext=false for i =  " << i << endl;
							break;
						}
						else continue;
					}
				}
			}
			else cout << "vecComp3 is empty" << endl;
		}

		if ((FlagNext == false && FlagMove[3] == true) || (FlagNext == false && (3 == Choise4))) //
		{
		//	cout << "if ((FlagNext == false && FlagMove[3] == true) || (FlagNext == false && (3 == Choise4)))" << endl;
			if (!computer.vecComp4.empty())
			{
				for (unsigned int i = 0; i < computer.vecComp4.size(); i++)
				{
					cout << "3" << endl;
					if (!GameCard4.empty()){
						
						int Tempo04 = computer.vecComp4[i];
						int TempoCard04 = GameCard4[0];


						if (Tempo04>TempoCard04)//???? ????? ?????? ???, ??????? ????? ?? ????, ?? ????? ??.
						{
						
							Temp4.push_back(GameCard4[0]);  //???????? ? ????????? ???????? ????? ????
							Temp4.push_back(computer.vecComp4.at(i));
							it2 = computer.vecComp4.begin() + i; computer.vecComp4.erase(it2); vector <int>(computer.vecComp4).swap(computer.vecComp4); //??????? ?????, ??????? ????, ? ???????
							
							FlagNext = true; //??? ??????, ??? ??? ??????!
						//	if (FlagNext == true) cout << "FlagNext=true for i =  " << i << endl;
						//	else cout << "FlagNext=false for i =  " << i << endl;
							break;
						}
						else continue;
					} //???? ????? ????????,?? ???????? ? ??????? CardF
					else
					{
						FlagF[3] = true;
						int Tempo04 = computer.vecComp4[i];
						int TempoCard04 = GameCardF[0];


						if (Tempo04>TempoCard04)//???? ????? ?????? ???, ??????? ????? ?? ????, ?? ????? ??.
						{
							
							Temp4.push_back(GameCardF[0]);  //???????? ? ????????? ???????? ????? ????
							Temp4.push_back(computer.vecComp4.at(i));
							it2 = computer.vecComp4.begin() + i; computer.vecComp4.erase(it2); vector <int>(computer.vecComp4).swap(computer.vecComp4); //??????? ?????, ??????? ????, ? ???????
							//	GameCard1.clear(); //??????? ? ???? ?????
							FlagNext = true; //??? ??????, ??? ??? ??????!
						//	if (FlagNext == true) cout << "FlagNext=true for i =  " << i << endl;
						//	else cout << "FlagNext=false for i =  " << i << endl;
							break;
						}
						else continue;
					}
				}
			}
			else cout << "vecComp4 is empty" << endl;
		}

		if (FlagNext == false)// ???? ??? ??? ? ?? ???????
		{
			
			if (1 == counter) //???? ??? ?????? ???, ?? ???????? ??? ? ?? ??????????, ?? ??????? ? ???????? ??? ?????
			{
				FunctionComputerGiveUp();
			}
			else {
				//???? ????? ????????, ?? ????? ?? ?????? ? ????? ??????(??????? true).
				
				FlagMove[Choise4] = true; counter++;  ComputerMove();
			}
			
		}
		if (FlagNext == true) {
			cout << "Comp did it!" << endl; FlagNext = false; GameCard1.clear(); //??????? ? ???? ????? 
			GameCard2.clear(); //??????? ? ???? ?????
			GameCard3.clear(); //??????? ? ???? ?????
			GameCard4.clear(); //??????? ? ???? ?????
			GameCardF.clear();
		}

	}



	void ShowKittyCard(){
		player.ShowCard();
		computer.ShowCard();
		cout << "\nFirst vector   ";
		for (unsigned int i = 0; i <GameCard1.size(); i++)
		{
			if (GameCard1.at(i) != 0) cout << GameCard1.at(i) << "  ";
		}
		cout << "\n2 vector   ";
		for (unsigned int i = 0; i < GameCard2.size(); i++)
		{
			if (GameCard2.at(i) != 0) cout << GameCard2.at(i) << "  ";
		}
		cout << "\n3 vector   ";
		for (unsigned int i = 0; i < GameCard3.size(); i++)
		{
			if (GameCard3.at(i) != 0) cout << GameCard3.at(i) << "  ";
		}
		cout << "\n4 vector   ";
		for (unsigned int i = 0; i <GameCard4.size(); i++)
		{
			if (GameCard4.at(i) != 0) cout << GameCard4.at(i) << "  ";
		}
		cout << "\n" << endl;
	}

	void CheckIfEmptyComp(){
		if (computer.vecComp1.empty()) FlagCompEmpty[0] = true;
		if (computer.vecComp2.empty()) FlagCompEmpty[1] = true;
		if (computer.vecComp3.empty()) FlagCompEmpty[2] = true;
		if (computer.vecComp4.empty()) FlagCompEmpty[3] = true;
		cout << "Empty something!" << endl;
	}

	void ComputerAttack()
	{
		for (int i = 0; i < 4; i++)    //????? ??????????.
		{
			FlagMove[i] = false;
		}
		SortCards();
		int Key;
		int index;
		CheckIfEmptyComp();
		while (1){
			Key = rand() % 4 + 1;
			if (FlagCompEmpty[Key - 1] == false) break;
		}
		cout << "Key is " <<Key<< endl;
		switch (Key)
		{
		case 1: cout << "Comp choose vec1! " << endl;
			 if (!computer.vecComp1.empty()) {
				 index = 1;
				GameCard1.push_back(computer.vecComp1.at(index - 1));
				GameCardF.push_back(GameCard1.at(0));
				cout << "GameCard1 = " << GameCard1.at(0) << endl;
				it2 = computer.vecComp1.begin() + index - 1; computer.vecComp1.erase(it2); vector <int>(computer.vecComp1).swap(computer.vecComp1);
				FlagMove[0] = true; break;
			}
			else ComputerAttack();
			break;
		case 2:cout << "Comp choose vec2! " << endl;
			 if (!computer.vecComp2.empty()){
				 index = 1;
				GameCard2.push_back(computer.vecComp2.at(index - 1));
				GameCardF.push_back(GameCard2.at(0));
				cout << "GameCard2 = " << GameCard2.at(0) << endl;
				it2 = computer.vecComp2.begin() + index - 1; computer.vecComp2.erase(it2); vector <int>(computer.vecComp2).swap(computer.vecComp2);
				FlagMove[1] = true; break;
			}
			else ComputerAttack(); break;
		case 3:cout << "Comp choose vec3! " << endl;
			 if (!computer.vecComp3.empty()){
				 index = 1;
				GameCard3.push_back(computer.vecComp3.at(index - 1));
				GameCardF.push_back(GameCard3.at(0));
				cout << "GameCard3 = " << GameCard3.at(0) << endl;
				it2 = computer.vecComp3.begin() + index - 1; computer.vecComp3.erase(it2); vector <int>(computer.vecComp3).swap(computer.vecComp3);
				FlagMove[2] = true; break;
			}
			else ComputerAttack(); break;
		case 4:cout << "Comp choose vec4! " << endl;
			 if (!computer.vecComp4.empty()) {
				 index =1;
				GameCard4.push_back(computer.vecComp4.at(index - 1));
				GameCardF.push_back(GameCard4.at(0));
				cout << "GameCard4 = " << GameCard4.at(0) << endl;
				it2 = computer.vecComp4.begin() + index - 1; computer.vecComp4.erase(it2); vector <int>(computer.vecComp4).swap(computer.vecComp4);
				FlagMove[3] = true; break;
			}
			else ComputerAttack(); break;
		}
	}

	void PlayerMove(){
		ShowKittyCard();
		player.ShowCard();
		computer.ShowCard();
		SortCards();
		cout << "Choise vector!" << endl;
		int Vector;
		unsigned int Index;
		cin >> Vector;
		switch (Vector){
		case 1:
			if ((FlagNext == false && FlagMove[0] == true) || (FlagNext == false && (0 == Choise4))){
				if (Vector-1 == Choise4)
				{
					FlagF[0] = true;
				while (1){
						cout << "Choose number of card from the vec1!" << endl;
						cin >> Index;
						if (Index > player.vecplayer1.size() || Index < 1){ cout << "Wrong index! Try again!" << endl; continue; }
						else break;
					}

					int Tempo01 = player.vecplayer1[Index - 1];
					int TempoCard01 = GameCardF[0];


					if (Tempo01>TempoCard01)//???? ????? ?????? ???, ??????? ????? ?? ????, ?? ????? ??.
					{
						Temp1.push_back(GameCardF[0]);  //???????? ? ????????? ???????? ????? ????
						Temp1.push_back(player.vecplayer1.at(Index - 1));
						it2 = player.vecplayer1.begin() + (Index - 1);  player.vecplayer1.erase(it2); vector <int>(player.vecplayer1).swap(player.vecplayer1); //??????? ?????, ??????? ????, ? ???????
						//	GameCard1.clear(); //??????? ? ???? ?????
						FlagNext = true; //??? ??????, ??? ??? ??????!
					//	if (FlagNext == true) cout << "FlagNext=true for i =  " << endl;
					//	else cout << "FlagNext=false for i =  " << endl;
						break;
					}
					else{ cout << "You can't beat the card with this one! Try again or give up! " << endl; PlayerMove(); }

				}
				else
				{
					cout << "  You can work with vec1!   " << endl;
					if (!player.vecplayer1.empty())
					{
						for (;;){
							cout << "Choose number of card from the vec1!" << endl;
							cin >> Index;
							if (Index > player.vecplayer1.size() || Index < 1){ cout << "Wrong index! Try again!" << endl; continue; }
							else break;
						}

						
						int Tempo01 = player.vecplayer1[Index - 1];
						int TempoCard01 = GameCard1[0];


						if (Tempo01>TempoCard01)//???? ????? ?????? ???, ??????? ????? ?? ????, ?? ????? ??.
						{
							
							Temp1.push_back(GameCard1[0]);  //???????? ? ????????? ???????? ????? ????
							Temp1.push_back(player.vecplayer1.at(Index - 1));
							it2 = player.vecplayer1.begin() + (Index - 1); player.vecplayer1.erase(it2); vector <int>(player.vecplayer1).swap(player.vecplayer1); //??????? ?????, ??????? ????, ? ???????
							
							FlagNext = true; //??? ??????, ??? ??? ??????!
							if (FlagNext == true) cout << "FlagNext=true for i =  " << endl;
							else { cout << "Try again! Wrong card1!   " << endl; PlayerMove(); }
						}
						else { cout << "Try again! Wrong card1!   " << endl; PlayerMove(); }
					}
					else { cout << "Sorry, but vec1 is empty!" << endl; PlayerMove(); }
				}
			}
			else{ cout << "You can't work with vec1!" << endl; PlayerMove(); }
			break;
			
		case 2: if ((FlagNext == false && FlagMove[1] == true) || (FlagNext == false && (1 == Choise4)))
		{
					if (Vector-1 == Choise4)
					{
						FlagF[1] = true;
						while (1){
							cout << "Choose number of card from the vec2!" << endl;
							cin >> Index;
							if (Index > player.vecplayer2.size() || Index < 1){ cout << "Wrong index! Try again!" << endl; continue; }
							else break;
						}

						int Tempo02 = player.vecplayer2[Index - 1];
						int TempoCard02 = GameCardF[0];


						if (Tempo02>TempoCard02)//???? ????? ?????? ???, ??????? ????? ?? ????, ?? ????? ??.
						{
							Temp2.push_back(GameCardF[0]);  //???????? ? ????????? ???????? ????? ????
							Temp2.push_back(player.vecplayer2.at(Index - 1));
							it2 = player.vecplayer2.begin() + (Index - 1);  player.vecplayer2.erase(it2); vector <int>(player.vecplayer2).swap(player.vecplayer2); //??????? ?????, ??????? ????, ? ???????
							
							FlagNext = true; //??? ??????, ??? ??? ??????!
							if (FlagNext == true) cout << "FlagNext=true for i =  " << endl;
							else cout << "FlagNext=false for i =  " << endl;
							break;
						}
						else{ cout << "You can't beat the card with this one! Try again or give up! " << endl; PlayerMove(); }

					}
					else{
						cout << "  You can work with vec2!   " << endl;
						if (!player.vecplayer2.empty())
						{
							while (1){
								cout << "Choose number of card from the vec1!" << endl;
								cin >> Index;
								if (Index > player.vecplayer2.size() || Index < 1){ cout << "Wrong index! Try again!" << endl; continue; }
								else break;
						}

						
							int Tempo02 = player.vecplayer2[Index - 1];
							int TempoCard02 = GameCard2[0];


							if (Tempo02>TempoCard02)//???? ????? ?????? ???, ??????? ????? ?? ????, ?? ????? ??.
							{
								
								Temp2.push_back(GameCard2[0]);  //???????? ? ????????? ???????? ????? ????
								Temp2.push_back(player.vecplayer2.at(Index - 1));
								it2 = player.vecplayer2.begin() + (Index - 1); player.vecplayer2.erase(it2); vector <int>(player.vecplayer2).swap(player.vecplayer2); //??????? ?????, ??????? ????, ? ???????
								//	GameCard1.clear(); //??????? ? ???? ?????
								FlagNext = true; //??? ??????, ??? ??? ??????!
								if (FlagNext == true) cout << "FlagNext=true for i =  " << endl;
								else { cout << "Try again! Wrong card1!   " << endl; PlayerMove(); }
							}
							else { cout << "Try again! Wrong card2!   " << endl; PlayerMove(); }
						}
						else { cout << "Sorry, but vec1 is empty!" << endl; PlayerMove(); }
					}
		}
				else{ cout << "You can't work with vec1!" << endl; PlayerMove(); }
				break;
		case 3: 
			if ((FlagNext == false && FlagMove[2] == true) || (FlagNext == false && (2 == Choise4)))
			{
				if (Vector-1 == Choise4)
				{
					FlagF[2] = true;
					while (1){
						cout << "Choose number of card from the vec3!" << endl;
						cin >> Index;
						if (Index > player.vecplayer3.size() || Index < 1){ cout << "Wrong index! Try again!" << endl; continue; }
						else break;
					}

					int Tempo03 = player.vecplayer3[Index - 1];
					int TempoCard03 = GameCardF[0];


					if (Tempo03>TempoCard03)//???? ????? ?????? ???, ??????? ????? ?? ????, ?? ????? ??.
					{
						Temp3.push_back(GameCardF[0]);  //???????? ? ????????? ???????? ????? ????
						Temp3.push_back(player.vecplayer3.at(Index - 1));
						it2 = player.vecplayer3.begin() + (Index - 1);  player.vecplayer3.erase(it2); vector <int>(player.vecplayer3).swap(player.vecplayer3); //??????? ?????, ??????? ????, ? ???????
						//	GameCard1.clear(); //??????? ? ???? ?????
						FlagNext = true; //??? ??????, ??? ??? ??????!
					//	if (FlagNext == true) cout << "FlagNext=true for i =  " << endl;
					//	else cout << "FlagNext=false for i =  " << endl;
						break;
					}
					else{ cout << "You can't beat the card with this one! Try again or give up! " << endl; PlayerMove(); }

				}
				else
				{
					cout << "  You can work with vec1!   " << endl;
					if (!player.vecplayer3.empty())
					{
					while (1){
							cout << "Choose number of card from the vec3!" << endl;
							cin >> Index;
							if (Index > player.vecplayer3.size() || Index < 1){ cout << "Wrong index! Try again!" << endl; continue; }
							else break;
						}

						
						int Tempo03 = player.vecplayer3[Index - 1];
						int TempoCard03 = GameCard3[0];


						if (Tempo03>TempoCard03)//???? ????? ?????? ???, ??????? ????? ?? ????, ?? ????? ??.
						{
							Temp3.push_back(GameCard3[0]);  //???????? ? ????????? ???????? ????? ????
							Temp3.push_back(player.vecplayer3.at(Index - 1));
							it2 = player.vecplayer3.begin() + (Index - 1); player.vecplayer3.erase(it2); vector <int>(player.vecplayer3).swap(player.vecplayer3); //??????? ?????, ??????? ????, ? ???????
							//	GameCard1.clear(); //??????? ? ???? ?????
							FlagNext = true; //??? ??????, ??? ??? ??????!
							if (FlagNext == true) cout << "FlagNext=true for i =  " << endl;
							else { cout << "Try again! Wrong card1!   " << endl; PlayerMove(); }
						}
						else { cout << "Try again! Wrong card1!   " << endl; PlayerMove(); }
					}
					else { cout << "Sorry, but vec3 is empty!" << endl; PlayerMove(); }
				}
			}
			else{ cout << "You can't work with vec3!" << endl; PlayerMove(); }
			break;


		case 4:
			if ((FlagNext == false && FlagMove[3] == true) || (FlagNext == false && (3 == Choise4)))
			{
				if (Vector-1 == Choise4)
				{
					FlagF[3] = true;
					while (1){
						cout << "Choose number of card from the vec1!" << endl;
						cin >> Index;
						if (Index > player.vecplayer4.size() || Index < 1){ cout << "Wrong index! Try again!" << endl; continue; }
						else break;
					}

					int Tempo01 = player.vecplayer4[Index - 1];
					int TempoCard01 = GameCardF[0];


					if (Tempo01>TempoCard01)//???? ????? ?????? ???, ??????? ????? ?? ????, ?? ????? ??.
					{
						Temp4.push_back(GameCardF[0]);  //???????? ? ????????? ???????? ????? ????
						Temp4.push_back(player.vecplayer4.at(Index - 1));
						it2 = player.vecplayer4.begin() + (Index - 1);  player.vecplayer4.erase(it2); vector <int>(player.vecplayer4).swap(player.vecplayer4); //??????? ?????, ??????? ????, ? ???????
						//	GameCard1.clear(); //??????? ? ???? ?????
						FlagNext = true; //??? ??????, ??? ??? ??????!
					//	if (FlagNext == true) cout << "FlagNext=true for i =  " << endl;
					//	else cout << "FlagNext=false for i =  " << endl;
						break;
					}
					else{ cout << "You can't beat the card with this one! Try again or give up! " << endl; PlayerMove(); }

				}
				else
				{
					cout << "  You can work with vec4!   " << endl;
					if (!player.vecplayer4.empty())
					{
						while (1){
							cout << "Choose number of card from the vec4!" << endl;
							cin >> Index;
						if (Index > player.vecplayer4.size() || Index < 1){ cout << "Wrong index! Try again!" << endl; continue; }
							else break;
						}

						int Tempo01 = player.vecplayer4[Index - 1];
						int TempoCard01 = GameCard4[0];


						if (Tempo01>TempoCard01)//???? ????? ?????? ???, ??????? ????? ?? ????, ?? ????? ??.
						{
	
							Temp4.push_back(GameCard4[0]);  //???????? ? ????????? ???????? ????? ????
							Temp4.push_back(player.vecplayer4.at(Index - 1));
							it2 = player.vecplayer4.begin() + (Index - 1); player.vecplayer4.erase(it2); vector <int>(player.vecplayer4).swap(player.vecplayer4); //??????? ?????, ??????? ????, ? ???????
							
							FlagNext = true; //??? ??????, ??? ??? ??????!
							if (FlagNext == true) cout << "FlagNext=true for i =  " << endl;
							else { cout << "Try again! Wrong card1!   " << endl; PlayerMove(); }
						}
						else { cout << "Try again! Wrong card1!   " << endl; PlayerMove(); }
					}
					else { cout << "Sorry, but vec1 is empty!" << endl; PlayerMove(); }
				}
			}
			else{ cout << "You can't work with vec1!" << endl; PlayerMove(); }
			break;

		case 5: cout << "Give Up!" << endl; 
			if (FlagNext == false)// ???? ??? ??? ? ?? ???????
			{
				FunctionPlayerGiveUp();
			}
			
			break;

		}
		if (FlagNext == true) {
			cout << "You did it!" << endl; FlagNext = false; GameCard1.clear(); //??????? ? ???? ????? 
			GameCard2.clear(); //??????? ? ???? ?????
			GameCard3.clear(); //??????? ? ???? ?????
			GameCard4.clear(); //??????? ? ???? ?????
			GameCardF.clear();
		}
	}

	void FunctionPlayerGiveUp(){
		Merged1.clear();
		Merged2.clear();
		Merged3.clear();
		Merged4.clear();
		if (!GameCard4.empty())	Temp4.push_back(GameCard4[0]);  //???????? ? ????????? ???????? ????? ????
		if (!GameCard1.empty())	Temp1.push_back(GameCard1[0]);
		if (!GameCard2.empty())	Temp2.push_back(GameCard2[0]);
		if (!GameCard3.empty())	Temp3.push_back(GameCard3[0]);
		if (!GameCardF.empty())
		{
			if (FlagF[0] == true) Temp1.push_back(GameCardF[0]);
			if (FlagF[1] == true) Temp2.push_back(GameCardF[0]);
			if (FlagF[2] == true) Temp3.push_back(GameCardF[0]);
			if (FlagF[3] == true) Temp4.push_back(GameCardF[0]);
		}
		GameCard1.clear();
		GameCard2.clear();
		GameCard3.clear();
		GameCard4.clear();
		GameCardF.clear();
		SortCards(); // ????????? ?????
		Merged1.resize(player.vecplayer1.size() + Temp1.size()); //???????? ??? ?????
		merge(player.vecplayer1.begin(), player.vecplayer1.end(), Temp1.begin(), Temp1.end(), Merged1.begin());
		player.vecplayer1.clear();
		sort(Merged1.begin(), Merged1.end());
		it = unique(Merged1.begin(), Merged1.end()); //delete elements
		Merged1.resize(it - Merged1.begin());  // new vector
		player.vecplayer1 = Merged1;

		Merged2.resize(player.vecplayer2.size() + Temp2.size());
		merge(player.vecplayer2.begin(), player.vecplayer2.end(), Temp2.begin(), Temp2.end(), Merged2.begin());
		player.vecplayer2.clear();
		sort(Merged2.begin(), Merged2.end());
		it = unique(Merged2.begin(), Merged2.end()); //delete elements
		Merged2.resize(it - Merged2.begin());  // new vector
		player.vecplayer2 = Merged2;

		Merged3.resize(player.vecplayer3.size() + Temp3.size());
		merge(player.vecplayer3.begin(), player.vecplayer3.end(), Temp3.begin(), Temp3.end(), Merged3.begin());
		player.vecplayer3.clear();
		sort(Merged3.begin(), Merged3.end());
		it = unique(Merged3.begin(), Merged3.end()); //delete elements
		Merged3.resize(it - Merged3.begin());  // new vector
		player.vecplayer3 = Merged3;

		Merged4.resize(player.vecplayer4.size() + Temp4.size());
		merge(player.vecplayer4.begin(), player.vecplayer4.end(), Temp4.begin(), Temp4.end(), Merged4.begin());
		player.vecplayer4.clear();
		sort(Merged4.begin(), Merged4.end());
		it = unique(Merged4.begin(), Merged4.end()); //delete elements
		Merged4.resize(it - Merged4.begin());  // new vector
		player.vecplayer4 = Merged4;

		for (int i = 0; i < 4; i++) //?????????? ??? ?????
		{
			FlagMove[i] = false;
			FlagF[i] = false;
		}
		FlagNext = false;
		FlagPlayerGiveUp = true;
	
	
	}
	void TempClearer(){
		Temp4.clear();
		Temp3.clear();
		Temp2.clear();
		Temp1.clear();
	}
	bool CheckIfPlayerCanAddCard(){
		//vector <int>VectorMerged;
		//VectorMerged.resize(Temp1.size()+Temp2.size()+Temp3.size() + Temp4.size());
		//	merge(Temp1.begin(), Temp1.end(), Temp2.begin(), Temp2.end(),  VectorMerged.begin());
		//	merge(VectorMerged.begin(), VectorMerged.end(), Temp3.begin(), Temp3.end(), VectorMerged.begin());
		//	merge(VectorMerged.begin(), VectorMerged.end(), Temp4.begin(), Temp4.end(), VectorMerged.begin());
		FlagCanAdd = false;
		int SizeAllComp = computer.vecComp1.size() + computer.vecComp2.size() + computer.vecComp3.size() + computer.vecComp4.size();
		if (SizeAllComp == 0) { cerr << "Computer hasn't any cards!" << endl; FlagCanAdd = false; return false; }
		int SizeAll = player.vecplayer1.size() + player.vecplayer2.size() + player.vecplayer3.size() + player.vecplayer4.size();
		if (SizeAll == 0) { cerr << "Player hasn't any cards!" << endl; FlagCanAdd = false; return false; }
		if (!GameCard1.empty()) {
			cout << "1empty" << endl;
			if (Function(Temp2, GameCard1)){ FlagCanAdd = true; return true; }
			else
			if (Function(Temp3, GameCard1)){ FlagCanAdd = true; return true; }
			else
			if (Function(Temp4, GameCard1)){ FlagCanAdd = true;  return true; }
			else { player.vecplayer1.push_back(GameCard1[0]); cerr << "You can't add this card to the game!" << endl; FlagCanAdd = false; SortCards(); GameCardClearer(); return false; }
		}
		if (!GameCard2.empty()) {
			cout << "2empty" << endl;
			if (Function(Temp1, GameCard2)){ FlagCanAdd = true; return true; }
			else
			if (Function(Temp3, GameCard2)){ FlagCanAdd = true; return true; }
			else
			if (Function(Temp4, GameCard2)){ FlagCanAdd = true; return true; }
			else { player.vecplayer2.push_back(GameCard2[0]); cerr << "You can't add this card to the game!" << endl; FlagCanAdd = false; SortCards(); GameCardClearer();  return false; }
		}
		if (!GameCard3.empty()) {
			cout << "3empty" << endl;
			if (Function(Temp1, GameCard3)){ FlagCanAdd = true; return true; }
			else
			if (Function(Temp2, GameCard3)){ FlagCanAdd = true; return true; }
			else
			if (Function(Temp4, GameCard3)){ FlagCanAdd = true; return true; }
			else { player.vecplayer3.push_back(GameCard3[0]); cerr << "You can't add this card to the game!" << endl;  FlagCanAdd = false; SortCards(); GameCardClearer();  return false; }
		}
		if (!GameCard4.empty()) {
			cout << "4empty" << endl;
			if (Function(Temp1, GameCard4)){ FlagCanAdd = true; return true; }
			else
			if (Function(Temp2, GameCard4)){ FlagCanAdd = true; return true; }
			else
			if (Function(Temp3, GameCard4)){ FlagCanAdd = true; return true; }
			else { player.vecplayer4.push_back(GameCard4[0]); cerr << "You can't add this card to the game!" << endl;  FlagCanAdd = false; SortCards(); GameCardClearer(); return false; }
		}
		return false;
	}

	void CheckIfComputerCanAddCard(){
		//vector <int>VectorMerged;//???????? ??? ??????? ????? ? 1 ??????
		//VectorMerged.resize(Temp1.size()+Temp2.size()+Temp3.size() + Temp4.size());
		//	merge(Temp1.begin(), Temp1.end(), Temp2.begin(), Temp2.end(),  VectorMerged.begin());
		//	merge(VectorMerged.begin(), VectorMerged.end(), Temp3.begin(), Temp3.end(), VectorMerged.begin());
		//	merge(VectorMerged.begin(), VectorMerged.end(), Temp4.begin(), Temp4.end(), VectorMerged.begin());

		//	vector <int> CompMerged;
		//	CompMerged.resize(computer.vecComp1.size() + computer.vecComp2.size() + computer.vecComp3.size() + computer.vecComp4.size());
		//	merge(computer.vecComp1.begin(), computer.vecComp1.end(), computer.vecComp2.begin(), computer.vecComp2.end(), CompMerged.begin());
		//	merge(CompMerged.begin(), CompMerged.end(), computer.vecComp3.begin(), computer.vecComp3.end(), CompMerged.begin());
		//	merge(CompMerged.begin(), CompMerged.end(), computer.vecComp4.begin(), computer.vecComp4.end(), CompMerged.begin());
		FlagCanCompAdd = false;
		for (int i = 0; i < 4; i++)
		{
			FlagMove[i] = false;
		}
	//	int SizeAllComp = computer.vecComp1.size() + computer.vecComp2.size() + computer.vecComp3.size() + computer.vecComp4.size();
		if (computer.vecComp1.empty() && computer.vecComp2.empty() && computer.vecComp3.empty() && computer.vecComp4.empty()) { TempTemp.clear(); FlagCanCompAdd = false; return; }
	//	if (SizeAllComp == 0) { FlagCanCompAdd = false; return; }
		//int SizeAll=player.vecplayer1.size() + player.vecplayer2.size() + player.vecplayer3.size() + player.vecplayer4.size();
		if (player.vecplayer1.empty() && player.vecplayer2.empty() && player.vecplayer3.empty() && player.vecplayer4.empty()) { TempTemp.clear(); FlagCanCompAdd = false; return; }

	//	if (SizeAll == 0) { FlagCanCompAdd = false; return; }
		if (Function2(Temp1, computer.vecComp2)) { cout << "0"; GameCard2.push_back(TempTemp.at(0)); TempTemp.clear(); cout << "1"; FlagMove[1] = true; FlagCanCompAdd = true; GameCardF.push_back(GameCard2.at(0)); return; }
		if (Function2(Temp1, computer.vecComp3)) { cout << "0"; GameCard3.push_back(TempTemp.at(0)); TempTemp.clear(); cout << "1"; FlagMove[2] = true; FlagCanCompAdd = true; GameCardF.push_back(GameCard3.at(0)); return; }
		if (Function2(Temp1, computer.vecComp4)) { cout << "0"; GameCard4.push_back(TempTemp.at(0)); TempTemp.clear(); cout << "1"; FlagMove[3] = true; FlagCanCompAdd = true; GameCardF.push_back(GameCard4.at(0)); return; }

		if (Function2(Temp2, computer.vecComp1)) { cout << "0";  GameCard1.push_back(TempTemp.at(0)); TempTemp.clear(); cout << "1"; FlagMove[0] = true; FlagCanCompAdd = true;  GameCardF.push_back(GameCard1.at(0)); return; }
		if (Function2(Temp2, computer.vecComp3)) { cout << "0"; GameCard3.push_back(TempTemp.at(0)); TempTemp.clear(); cout << "1"; FlagMove[2] = true;  FlagCanCompAdd = true;  GameCardF.push_back(GameCard3.at(0)); return; }
		if (Function2(Temp2, computer.vecComp4)) { cout << "0";  GameCard4.push_back(TempTemp.at(0)); TempTemp.clear(); cout << "1"; FlagMove[3] = true; FlagCanCompAdd = true;  GameCardF.push_back(GameCard4.at(0)); return; }

		if (Function2(Temp3, computer.vecComp1)) { cout << "0";  GameCard1.push_back(TempTemp.at(0)); TempTemp.clear(); cout << "1"; FlagMove[0] = true; FlagCanCompAdd = true;  GameCardF.push_back(GameCard1.at(0)); return; }
		if (Function2(Temp3, computer.vecComp2)) { cout << "0";   GameCard2.push_back(TempTemp.at(0)); TempTemp.clear(); cout << "1"; FlagMove[1] = true; FlagCanCompAdd = true;  GameCardF.push_back(GameCard2.at(0)); return; }
		if (Function2(Temp3, computer.vecComp4)) { cout << "0"; GameCard4.push_back(TempTemp.at(0));  TempTemp.clear(); cout << "1"; FlagMove[3] = true;  FlagCanCompAdd = true;  GameCardF.push_back(GameCard4.at(0)); return; }

		if (Function2(Temp4, computer.vecComp1)) { cout << "0"; GameCard1.push_back(TempTemp.at(0));  TempTemp.clear(); cout << "1"; FlagMove[0] = true;  FlagCanCompAdd = true; GameCardF.push_back(GameCard1.at(0)); return; }
		if (Function2(Temp4, computer.vecComp2)) { cout << "0"; GameCard2.push_back(TempTemp.at(0)); TempTemp.clear(); cout << "1"; FlagMove[1] = true;  FlagCanCompAdd = true;  GameCardF.push_back(GameCard2.at(0)); return; }
		if (Function2(Temp4, computer.vecComp3)) { cout << "0";  GameCard3.push_back(TempTemp.at(0)); TempTemp.clear(); cout << "1"; FlagMove[2] = true; FlagCanCompAdd = true;  GameCardF.push_back(GameCard3.at(0)); return; }
		//TempClearer();
		TempTemp.clear();
		
	}

	bool Function2(vector <int>&TempMerged, vector<int> &CompMerge){
		if (TempMerged.empty() || CompMerge.empty()) return false;
		for (unsigned int i = 0; i < TempMerged.size(); i++)
		{
			for (unsigned int j = 0; j < CompMerge.size(); j++)
			{
				if (TempMerged.at(i) == CompMerge.at(j) || ((TempMerged.at(i) - CompMerge.at(j)) == 9) || ((CompMerge.at(j) - TempMerged.at(i)) == 9)) {
					
						TempTemp.push_back(CompMerge.at(j));
						it2 = CompMerge.begin() + j; CompMerge.erase(it2); vector <int>(CompMerge).swap(CompMerge);
						cout << "Can add!" << endl; SortCards();       return true;
				}
			}
		}
		return false;
	
	}

	bool Function(vector<int> Temp, vector<int> GameCard){
		if (Temp.empty()) return false;
		for (unsigned int i = 0; i < Temp.size(); i++)
		{
			if ((Temp.at(i) == GameCard[0]) || ((Temp.at(i) - GameCard[0]) == 9) || ((GameCard[0] - Temp.at(i)) == 9)) { cout << "True" << endl; Temp.at(i); return true; }
		}
		return false;
	}

	void FunctionComputerGiveUp()
	{
		counter = 0; //?????????? ???????
		Merged1.clear();
		Merged2.clear();
		Merged3.clear();
		Merged4.clear();
		if (!GameCard4.empty())	Temp4.push_back(GameCard4[0]);  //???????? ? ????????? ???????? ????? ????
		if (!GameCard1.empty())	Temp1.push_back(GameCard1[0]);
		if (!GameCard2.empty())	Temp2.push_back(GameCard2[0]);
		if (!GameCard3.empty())	Temp3.push_back(GameCard3[0]);
		if (!GameCardF.empty())
		{
			if (FlagF[0] == true) Temp1.push_back(GameCardF[0]);
			if (FlagF[1] == true) Temp2.push_back(GameCardF[0]);
			if (FlagF[2] == true) Temp3.push_back(GameCardF[0]);
			if (FlagF[3] == true) Temp4.push_back(GameCardF[0]);
		}
		GameCard1.clear();
		GameCard2.clear();
		GameCard3.clear();
		GameCard4.clear();
		GameCardF.clear();
		SortCards(); // ????????? ?????
		Merged1.resize(computer.vecComp1.size() + Temp1.size()); //???????? ??? ?????
		merge(computer.vecComp1.begin(), computer.vecComp1.end(), Temp1.begin(), Temp1.end(), Merged1.begin());
		computer.vecComp1.clear();
		computer.vecComp1 = Merged1;

		Merged2.resize(computer.vecComp2.size() + Temp2.size());
		merge(computer.vecComp2.begin(), computer.vecComp2.end(), Temp2.begin(), Temp2.end(), Merged2.begin());
		computer.vecComp2.clear();
		computer.vecComp2 = Merged2;

		Merged3.resize(computer.vecComp3.size() + Temp3.size());
		merge(computer.vecComp3.begin(), computer.vecComp3.end(), Temp3.begin(), Temp3.end(), Merged3.begin());
		computer.vecComp3.clear();
		computer.vecComp3 = Merged3;

		Merged4.resize(computer.vecComp4.size() + Temp4.size());
		merge(computer.vecComp4.begin(), computer.vecComp4.end(), Temp4.begin(), Temp4.end(), Merged4.begin());
		computer.vecComp4.clear();
		computer.vecComp4 = Merged4;

		TempClearer();
		for (int i = 0; i < 4; i++) //?????????? ??? ?????
		{
			FlagMove[i] = false;
			FlagF[i] = false;
		}
		FlagNext = false;
		counter = 0;

		FlagGiveUpComp = true;
	}

	bool CheckEndOfGame(){
		if (player.vecplayer1.empty() && player.vecplayer2.empty() && player.vecplayer3.empty() && player.vecplayer4.empty() && computer.vecComp1.empty() && computer.vecComp2.empty() && computer.vecComp3.empty() && computer.vecComp4.empty())
		{
			cout << "Nobody's win!!!" << endl; return true;
		}
		else
		if (player.vecplayer1.empty() && player.vecplayer2.empty() && player.vecplayer3.empty() && player.vecplayer4.empty())
		{
			cout << "Player win!!!" << endl; return true;
		}
		else
		if (computer.vecComp1.empty() && computer.vecComp2.empty() && computer.vecComp3.empty() && computer.vecComp4.empty())
		{
			cout << "Computer win!!!" << endl; return true;
		}
		else return false;
	
	}
};




class Main {
	Game game;

public:
	void ComputerAttack()
	{
		game.DealCardsForPlayer();
		if (game.GetFlagEndCards())
		{
			if (game.CheckEndOfGame()) return;
		}
		cout << "Computer attack!!!" << endl;
	//	game.DealCardsForPlayer();
		game.ComputerAttack();

			for (;;){
				
				if (game.FlagPlayerGiveUp == false)	game.PlayerMove();
				game.CheckIfComputerCanAddCard();  cout << "Cout!" << endl;
				if (game.FlagCanCompAdd == true) {
					if (game.FlagPlayerGiveUp == false){
						cout << "Here!" << endl;
						game.PlayerMove();
						game.ShowKittyCard();
						system("pause");
						system("cls");
					}
					else {
						cout << "You can't attack computer! You've just have all computer cards!" << endl;
						game.FunctionPlayerGiveUp();
						game.ShowKittyCard();
						system("pause");
						system("cls");
						continue;
					}
					game.ShowKittyCard();
				}
				else  { game.TempClearer(); break; }
				
			}

	}

	void PlayerAttack(){
		char Key;
			cout << "You can attack!!! " << endl;
			game.DealCardsForPlayer();
			if (game.GetFlagEndCards())
			{
				if (game.CheckEndOfGame()) return;
			}
			game.ShowKittyCard();
			game.PlayerAttack();
			if (game.FlagGiveUpComp == false)	game.ComputerMove();
			while (1){
				cout << "Do you want to add card to the game? Press Y if you want, press N if don't " << endl;
				cin >> Key;
				if (Key == 'y' || Key == 'Y')
				{
					game.PlayerAttack(); if (game.CheckIfPlayerCanAddCard()) {
						cout << "Do it!" << endl;
						if (game.FlagCanAdd == true) {
							if (game.FlagGiveUpComp == false){
								game.ComputerMove();
								game.ShowKittyCard();
								system("pause");
								system("cls");
							}
							else
							{
								cout << "Comp can't attack you! It's  just'll has all your cards!" << endl;
								game.FunctionComputerGiveUp();
								game.ShowKittyCard();
								system("pause");
								system("cls");
								continue;
							}
							game.ShowKittyCard();
						}
						else  { game.TempClearer(); }
					//	game.ShowKittyCard();
					//	system("pause");
					//	system("cls");
					}

					
				}

				if (Key == 'n' || Key == 'N') {
					game.TempClearer(); cout << "Du"; game.FlagCanCompAdd = false;
					cout << "Bu";
				//	game.FlagGiveUpComp = false;
					cout << "Gu";
					
					
					break;
				}
			//	game.ShowKittyCard();
			//	system("pause");
			//	system("cls");
			}

	}



	void MainFunction(){
		game.TrumpCard();  //???????? ???????? ?????
		game.InitialCards();
		game.DealCardsForPlayer();
		cout << "Right!" << endl;
		//	char Key;
		while (1){
			while (1){
				cout << "Computer attack!" << endl;
				ComputerAttack();

				if (game.FlagCanCompAdd == false && game.FlagPlayerGiveUp == true) {
					cout << "Comp Continue attack player!!!" << endl;
					game.FlagCanAdd = false;
					game.FlagPlayerGiveUp = false;
					cout << "5" << endl;
					game.DealCardsForPlayer();
					cout << "6" << endl;
					if (game.GetFlagEndCards())
					{
						cout << "CheckEndOfGame" << endl;
						if(game.CheckEndOfGame()) return;
					}
					continue;
				}

				else
				{
					game.FlagCanAdd = false;
					game.FlagPlayerGiveUp = false;
					game.DealCardsForPlayer();
					if (game.GetFlagEndCards())
					{
						if (game.CheckEndOfGame()) return;
					}
					break;
				}
			}
			while (1){
				PlayerAttack();
				if (game.FlagCanAdd == false && game.FlagGiveUpComp == true) {
					game.FlagCanCompAdd = false;
					game.FlagGiveUpComp = false;
					game.DealCardsForPlayer();
					if (game.GetFlagEndCards())
					{
						game.CheckEndOfGame();
					}
					continue;
				}
				else{
					game.FlagCanCompAdd = false;
					game.FlagGiveUpComp = false;
					game.DealCardsForPlayer();
					if (game.GetFlagEndCards())
					{
						if (game.CheckEndOfGame()) return;
					}
					break;
				}
			}
			//game.FlagGiveUpComp = false;
		}
	}
};

int main(){
	srand((unsigned) time(NULL));
	Main MainGame;
	MainGame.MainFunction();
	return 0;
}

/* ????????!!! ???? FlagCanAdd = false (???? ???????? ?? ??, ????? ?? ???????? ?????????????? ????? (????? ?????))
    ???? FlagCompCanAdd=false(???? ???????? ?? ??, ????? ?? ???????? ?????????????? ?????(????? ?????????))
	?? ????-?????? ???????????, ????????? ???????	 TempClearer();
*/