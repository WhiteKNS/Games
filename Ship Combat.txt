#include <iostream>
#include <ctime>
#include <vector>
#include <fstream>
#include <Windows.h>
using namespace std;
#define N 10			//?????????? ????? 
#define M 10			//???-?? ???????
#define MAX 4
#define PUZZLE 10		//???-?? ????????
#define TRUE 1			//??? ??? ???????
#define FALSE 0
#include "Ship.h"

/*
class Ship{

private:
	int ShipField[N][M];     //????
	int TempField[N][M];		//????????? ????
	int line1;    
	int column1;
	int NumberLink;      //????? ???????
	int i1, j1;
	int Choise;			// ??? rand ?????? ,??? ????? ????????????? ?????? - ?? ??????????? ??? ?? ?????????
	int counter;			//??????? ???-?? ???????? ?? ????
	int Flag[4];
	int Number;
	char CharField[N][M];			//??? ???????????? ????
	int line3, column3;


	friend	void gotoXY(int column, int line)   // Set Cursor position;     ????????????? ??? ??????? Player ? Comp 
	{
		COORD coord;
		coord.X = column;
		coord.Y = line;
		SetConsoleCursorPosition(
			GetStdHandle(STD_OUTPUT_HANDLE),
			coord
			);

	}

	void ShipTemp(){           
		for (int i = 0; i < N; i++){
			for (int j = 0; j < M; j++){
				ShipField[i][j] = TempField[i][j];
			}
		}
	}
	void Temp(){                //????????? ???? - ??????? ?? ??? ?????? , ???? ????? ???-?? ? ????????????? ????? ?? ???, ????? ???? ???? ?????????
		ofstream file("E:\\record.txt", ios::out|ios::trunc);    //???? ????????? ? ???? ? ??????? ???? INT
		for (int i = 0; i < N; i++, file << "\n"){
			for (int j = 0; j < M; j++){
				TempField[i][j] = ShipField[i][j];
				file << TempField[i][j];
			}
		}
		file << "\n\n";
		file.close();

	}


	int CheckVertical(){                 //?????????, ????? ?? ??????????? ??????? ?? ?????????

		for (int i = line1; i < NumberLink + line1; i++){
			if (10 == i) return FALSE;
			if (ShipField[i][column1]) return FALSE;
		}
		return TRUE;
	}
	int CheckHorizontal(){      //????? ?? ??????????? ??????? ?? ????????????
		for (int i = column1; i < NumberLink + column1; i++){
			if (10 == i) return FALSE;
			if (ShipField[line1][i]) return FALSE;
		}
		return TRUE;
	}

	void InitialArr2Horizontal(){                //?????? ???????(???????????????) ????????????? ???????? 3 - ?.?. ????? ??????? ?? ????????? ???? ? ????? ?? ????
		for (int i = line1 - 1; i < (line1 + 2); i++){
			for (int j = column1 - 1; j < (column1 + 1 + NumberLink); j++){
				if (i<0 || i>9 || j<0 || j>9) continue;
				if (!ShipField[i][j]) ShipField[i][j] = 3;
			}
		}

	}

	void InitialArr2Vertical(){                 //?? ??, ?????? ?? ?????????
		for (int i = line1 - 1; i < (line1 + 1 + NumberLink); i++){
			for (int j = column1 - 1; j < (column1 + 2); j++){
				if (i<0 || i>9 || j<0 || j>9) continue;
				if (!ShipField[i][j]) ShipField[i][j] = 3;
			}
		}

	}

	void InitialVertical(){ //??????????? ??????? ?? ?????????
		int i, j;
		for (i = line1, j = column1; i < (NumberLink + line1); i++){
			ShipField[i][j] = 1;
		}
	}


	void InitialHorizontal(){ //?? ???????????
		int i, j;
		for (i = line1, j = column1; j < (NumberLink + column1); j++){
			ShipField[i][j] = 1;
		}
	}

public: Ship(int column2, int line2){       //???????????
			for (int i = 0; i < N; i++){
				for (int j = 0; j < M; j++){
					ShipField[i][j] = 0;
				}
			}
			counter = 0;
			Number = 0;
			column3 = column2;
			line3 = line2;
}


		void MainFunk(){                  //??????????? ???????? ????????? ??????? 
			line1 = rand() % 10;           //???????? ???????? ???????? ????? ? ???????
			column1 = rand() % 10;
			ifstream file;       
			Choise = rand() % 2;     //???????? ????????, ??? ????? ?????????? ?????? - ?? ??????????? ??? ?? ?????????
			if (0 == Number) NumberLink = 4;           //NumberLink ????????, ????? ????? ????? ???????! ?.?. 4? ???????? ????, ?? Number ?????? ?? ????????? 0
			if ((1 == Number) || (2 == Number)) NumberLink = 3;
			if ((3 == Number) || (4 == Number)||(5==Number)) NumberLink = 2;
			if ((Number>5)&&(Number<PUZZLE)) NumberLink = 1;
			if (Choise == TRUE)   {CheckVertical();  if (CheckVertical()) {InitialVertical(); InitialArr2Vertical();  Temp(); Number++; counter = 0; if(Number<PUZZLE) MainFunk();	}
				else { counter++; if (100 == counter) { counter = 0; Number--; ShipTemp(); } MainFunk(); }}
			else {CheckHorizontal(); if (CheckHorizontal()) {InitialHorizontal();  InitialArr2Horizontal(); Temp(); Number++; counter = 0; if (Number < PUZZLE) MainFunk();	}
				else {counter++;  if (100 == counter) { counter = 0; Number--; ShipTemp(); } MainFunk();}	}
			}
		 


		void MainHandle(){
			system("cls");
			PaintField();
			PrintField();
			cout << "Input 2 numbers! First,  to point to the line, second - to point to the column!" << endl;
			cin >> line1 >> column1;
			line1--; column1--;
			cout << "If you want to create horizontal linkor, press 0, if you want to create vertical linkor, press 1" << endl;
			cin >> Choise;
			if (0 == Number) { cout << "You're trying to create 4link linkor!" << endl; NumberLink = 4;  }          //NumberLink ????????, ????? ????? ????? ??????! ?.?. 4? ???????? ????, ?? Number ?????? ?? ????????? 0
			if ((1 == Number) || (2 == Number)) { cout << "You're trying to create 3link linkor!" << endl; NumberLink = 3;  }
			if ((3 == Number) || (4 == Number) || (5 == Number))  { cout << "You're trying to create 2link linkor!" << endl; NumberLink = 2; }
			if ((Number>5) && (Number<PUZZLE))  { cout << "You're trying to create 1link linkor!" << endl; NumberLink = 1; PaintField();  }
			if (Choise == TRUE)   {
				CheckVertical();  if (CheckVertical()) { InitialVertical(); InitialArr2Vertical();  Temp(); Number++; counter = 0; if (Number<PUZZLE) MainHandle(); }
				else { counter++; if (100 == counter) { counter = 0; Number--; ShipTemp(); } MainHandle(); }
			}
			else {
				CheckHorizontal(); if (CheckHorizontal()) { InitialHorizontal();  InitialArr2Horizontal(); Temp(); Number++; counter = 0; if (Number < PUZZLE) MainHandle(); }
				else { counter++;  if (100 == counter) { counter = 0; Number--; ShipTemp(); } MainHandle(); }
			}
		}


		void PaintField(){                  //?????????? ???? ? ??? char
			for (int i = 0; i < N; i++){
				for (int j = 0; j < M; j++){
					if (!ShipField[i][j]) CharField[i][j] = char(176);
					if(1==ShipField[i][j]) CharField[i][j] = char(17);
					if (3 == ShipField[i][j]) CharField[i][j] = char(176);
				}
			}
			cout << "\n" << endl;
		
		}
		
		void PrintField(){                      //?????? ????+ ?????????? ?????? ? ????
			int counter1 = 1;
			ofstream File("E:\\record.doc", ios::out);
			//cout.width(50);
			//cout.setf(ios::left);
			int LINE = line3;
			void gotoXY(int columns, int lines);
			gotoXY(column3, LINE);
			cout << "My field\n" << endl;
			LINE +=2;
			gotoXY(column3, LINE);
			HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
			cout << "RESPUBLICA" << endl;
			File << "RESPUBLICA" << endl;
			for (int i = 0; i < N; i++, SetConsoleTextAttribute(hConsole, (WORD)((15 << 4) | 0)), cout << " " << counter1, File << " " << counter1, counter1++, cout << "\n", File << "\n"){
				LINE++; gotoXY(column3, LINE);
				for (int j = 0; j < M; j++){
					SetConsoleTextAttribute(hConsole, (WORD)((15 << 5) | 9));
					cout <<left<< CharField[i][j];
					File <<left<<CharField[i][j];
				}
			}
			gotoXY(column3, LINE+1);
			cout <<"RESPUBLICA" << "\n" << endl;
			File << "RESPUBLICA" << "\n" << endl;

			cout << "\n" << endl;
			File << "\n\n" << endl;
			File.close();
			LINE = line3;
		}



		int ReturnField(int ShipField1[N][M]){         //??????? ??? ???? ,????? ????? ????? ???? ???????? ???? ? ?????? ??????
			for (int i = 0; i < N; i++){
				for (int j = 0; j < M; j++){
					ShipField1[i][j] = ShipField[i][j];
				}
			}
			return ShipField1[N][M];
		}
		~Ship(){}          //??????????

};
*/
class Player{              //????? ??? ???? ??????
protected:
	
	int ChoiseLines, ChoiseColumns;
	int Flag;
	int END;				 //??????? ????? ????
	int ShipField1[N][M];		//???? ?????
	int TempField1[N][M];
	int TempField2[N][M];
	char CharTemp[N][M];		
	int column5, line5;
	friend void gotoXY(int columns, int lines);   //???????? ????????????? ???????
	

	virtual void Point(){    //????? ???????? ????????
		std::cout << "Make your choise! Select 2 numbers - first - to point to the line, second - to point to the column!" << endl;
		cin >> ChoiseLines >> ChoiseColumns;
		ChoiseLines--;
		ChoiseColumns--;
	}

	int EveryChoise(){           //?????????, ????? ?????? ??? ?????? ??? ??????
		int Flag1 = FALSE;
		for (int i = ChoiseLines - 1; i <= ChoiseLines + 1; i++){
			for (int j = ChoiseColumns - 1; j <= ChoiseColumns + 1; j++){
				if (i<0 || i>9 || j<0 || j>9) continue;
				if ((1 == ShipField1[i][j]) && (4 == ShipField1[ChoiseLines][ChoiseColumns]))  { Flag1 = TRUE; break; }
			}
		}

		if (!Flag1) { END++; HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE); SetConsoleTextAttribute(hConsole, (WORD)((15 << 4) | 12));    std::cout << "The linkor was smashed! " << endl; Sleep(2000); SetConsoleTextAttribute(hConsole, (WORD)((15 << 4) | 0)); }
		
		return Flag1;
	}


	int CheckLink(){  //?????????, ????? ?? ??????? ???
		HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
		if (1 == ShipField1[ChoiseLines][ChoiseColumns]) { ShipField1[ChoiseLines][ChoiseColumns] = 4; SetConsoleTextAttribute(hConsole, (WORD)((15 << 4) | 12));  cout << "HIT!" << endl; SetConsoleTextAttribute(hConsole, (WORD)((15 << 4) | 0)); return TRUE; }
		else {
			if (0 == ShipField1[ChoiseLines][ChoiseColumns] || 3 == ShipField1[ChoiseLines][ChoiseColumns]) { ShipField1[ChoiseLines][ChoiseColumns] = 5; SetConsoleTextAttribute(hConsole, (WORD)((15 << 4) | 2)); cout << "beside the mark!" << endl; SetConsoleTextAttribute(hConsole, (WORD)((15 << 4) | 0)); return TRUE; }
			else return FALSE;
		}
	}

	void PlayerField(){   //?????? ???? + ?????? ? ????
		int counter1 = 1;
		Flag = FALSE;
		ofstream FILE("E:\\record.doc", ios::out); //???? ??? ?????? ? ??????????????? ????????? ?????????? ??????????
		for (int i = 0; i < N; i++){
			for (int j = 0; j < M; j++){
				if ((4 == ShipField1[i][j]) || (5 == ShipField1[i][j])) { TempField1[i][j] = ShipField1[i][j]; Flag = TRUE; } //???? ? ???? ????????, ?? ?????????? ????? ????
			}
		}


		for (int i = 0; i < N; i++){                              //?????????? ???? ???? int ? ??? char;
			for (int j = 0; j < M; j++){
				if (!TempField1[i][j]) CharTemp[i][j] = char(176);     //?????? ??????
				else{
					if (4 == ShipField1[i][j]) CharTemp[i][j] = char(88);	//??????? ??? ?????? ???????
					else {
						if (5 == ShipField1[i][j]) CharTemp[i][j] = char(149);    //????
						else CharTemp[i][j] = char(176);  // ???? ?? ???? ???? ??????? 3 ??? 1 , ?? ???????? ??? ?? ??????.
					}
				}
			}
		}
		int LINE = line5;
		void gotoXY(int columns, int lines);
		gotoXY(column5, LINE);
		const int COLUMN = column5;
		cout << "Computer's field" << endl;
		LINE++; gotoXY(COLUMN, LINE);
		cout << "12345678910" << endl;
		FILE << "RESPUBLICA" << endl;
		HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
		void gotoXY(int columns, int lines);
		for (int i = 0; i < N; i++, cout << " " << counter1, FILE << " " << counter1, counter1++, FILE << "\n", cout << "\n"){            //???? ? ???? ????????, ?? ????????? ? ????;
			void gotoXY(int columns, int lines);
			LINE++; gotoXY(COLUMN, LINE);
			for (int j = 0; j < M; j++){
				if (CharTemp[i][j] == char(88)) SetConsoleTextAttribute(hConsole, (WORD)((15 << 4) | 12));
				else SetConsoleTextAttribute(hConsole, (WORD)((15 << 4) | 0));
					FILE << CharTemp[i][j];
					cout << CharTemp[i][j];
				
			}
		}
		LINE = line5;
		FILE << "\n\n";
		cout << "\n" << endl;
		FILE.close();
	}
	
public:
	Player(int ShipField11[N][M], int column4, int line4){           //???????????
		line5 = line4; column5 = column4;
		Flag = FALSE;
		for (int i = 0; i < N; i++){
			for (int j = 0; j < M; j++){
				CharTemp[i][j] = char(176);
			}
		}
		for (int i = 0; i < N; i++){
			for (int j = 0; j < M; j++){
				TempField2[i][j] = ShipField11[i][j];
			}
		}
		for (int i = 0; i < N; i++){
			for (int j = 0; j < M; j++){
				ShipField1[i][j] = ShipField11[i][j];
			}
		}
		END = 0;
	}

	virtual void Game(){
		PlayerField(); //????????????? ????;
		Point();  //???????? ????????;
		if (CheckLink()) { if (4==ShipField1[ChoiseLines][ChoiseColumns]) EveryChoise();       //???? ??? ??????? ?????, ?? ... ???? ??????, ?????????, ?????????? ?????? ??? ?????? ??? ??????
		PlayerField(); EndCheck();   //?????? ????, ???????? ?? ????? ????
		} //???? ????? ??????? ???, ?? ????????????? ????, ?????????? ? ????;
		else { std::cout << "Inaccessible square!" << endl;  Game(); }   //???? ??????? ???????????? ??????, ?? ??????? ?? ???? ??????, ?????????? ???????????? ? ???? ??????
	}

	
	virtual bool EndCheck(){     //???????? ?? ?????
		if (10 == END) { void gotoXY(int columns, int lines); gotoXY(30, 30); cout << "You win!" << endl; return true; }
		else return false;
	}
	~Player(){}
};


class Comp:public Player{    //??? ??????????   ????????? ????? Player
private:
	int column7, line7;
	int Next[N][M];
	int NextChoiseLines, NextChoiseColumns;


	int AlsoCheck(){            //?????????, ???? ?? ????? ? 3 4
		int Flag1 = FALSE;
		for (int i = ChoiseLines - 1; i <= ChoiseLines + 1; i++){
			for (int j = ChoiseColumns - 1; j <= ChoiseColumns + 1; j++){
				if (i<0 || i>9 || j<0 || j>9) continue;
				if (4 == ShipField1[i][j])  { Flag1 = TRUE; break; }
			}
		}
		return Flag1;
	}


	int CheckLinkor(){  //?????????, ????? ?? ??????? ???
		if (ChoiseLines <0 || ChoiseLines>9 || ChoiseColumns<0 || ChoiseColumns>9) return FALSE;
		if (1 == ShipField1[ChoiseLines][ChoiseColumns]) { return TRUE; }
		else { return FALSE; }
	}


	void NextPoint(){   //???? ??????? ??????, ?? ???????? ?????????? ??????????? ?????????? ??????
		for (int i = 0; i < 4; i++){
			if (0 == i) { ChoiseColumns -= 1; if (CheckLinkor()){ NextChoiseLines = ChoiseLines; NextChoiseColumns = ChoiseColumns; break; } else{ ChoiseColumns += 1; continue; } }
			if (1 == i) { ChoiseColumns += 1; if (CheckLinkor()){ NextChoiseLines = ChoiseLines; NextChoiseColumns = ChoiseColumns; break; } else{ ChoiseColumns -= 1; continue; } }
			if (2 == i) { ChoiseLines -= 1; if (CheckLinkor()){ NextChoiseLines = ChoiseLines; NextChoiseColumns = ChoiseColumns; break; } else { ChoiseLines += 1; continue; } }
			if (3 == i) { ChoiseLines += 1; if (CheckLinkor()){ NextChoiseLines = ChoiseLines; NextChoiseColumns = ChoiseColumns; break; } else{ ChoiseLines -= 1; break; } }
		}
	}



	virtual void Point(){     //????? ????? ? ???????
		ChoiseLines = NextChoiseLines;
		ChoiseColumns = NextChoiseColumns;
	}

	


public:
	Comp(int ShipField2[N][M], int column6, int line6) :Player(ShipField1, column5, line5){
		column7 = column6;
		line7 = line6;
		for (int i = 0; i < N; i++){
			for (int j = 0; j < M; j++){
				ShipField1[i][j] = ShipField2[i][j];
			}
		}
		END = 0;
		NextChoiseLines = rand() % 10;
		NextChoiseColumns = rand() % 10;
	}


	virtual void Game(){    //??????????? ??????? ... ???????? ? ????? ???????? ????? ?? ???????? "??? ??????"
		system("cls");
		if (EndCheck()) return;
		CompField();
		Point();  //???? ?????? ???;
		if (CheckLink()) {
			if (4 == ShipField1[ChoiseLines][ChoiseColumns]){
				if (EveryChoise()){ NextPoint(); }     // ???? ?????? ?? ????, ?? ???? ??? ????? ?????? ???????
				else {
					if (3 == ShipField1[ChoiseLines][ChoiseColumns]) { if (AlsoCheck()){ NextChoiseLines = rand() % 10; NextChoiseColumns = rand() % 10; Game(); } } //???? ?????? ? 3, ? ????? ???? ???????? ??????, ?? ?????????????? ??????????);

					NextChoiseLines = rand() % 10; NextChoiseColumns = rand() % 10; }
			}
			CompField(); EndCheck();
			//if (ShipField1[ChoiseLines][ChoiseColumns] != 4) { NextChoiseLines = rand() % 10; NextChoiseColumns = rand() % 10; }
		} //???? ????? ??????? ???, ?? ????????????? ????, ?????????? ? ????;
		else { NextChoiseLines = rand() % 10; NextChoiseColumns = rand() % 10;  Game(); }
	}
	
	void CompField(){   //?????? ???? ?????+ ?????? ? ????
		int counter1 = 1;
		Flag = FALSE;
		//	system("cls");
		ofstream FILE("E:\\recordComputer.doc", ios::app|ios::trunc); //???? ??? ?????? ? ??????????????? ????????? ?????????? ??????????
		for (int i = 0; i < N; i++){
			for (int j = 0; j < M; j++){
				if ((4 == ShipField1[i][j]) || (5 == ShipField1[i][j])) { TempField1[i][j] = ShipField1[i][j]; Flag = TRUE; } //???? ? ???? ????????, ?? ?????????? ????? ????
			}
		}


		for (int i = 0; i < N; i++){                              //?????????? ???? ???? int ? ??? char;
			for (int j = 0; j < M; j++){
				if (!TempField1[i][j]) CharTemp[i][j] = char(176);     //?????? ??????
				else{
					if (4 == ShipField1[i][j]) CharTemp[i][j] = char(88);	//??????? ??? ?????? ???????
					else {
						if (5 == ShipField1[i][j]) CharTemp[i][j] = char(149);    //????
						else CharTemp[i][j] = char(176);  // ???? ?? ???? ???? ??????? 3 ??? 1 , ?? ???????? ??? ?? ??????.
					}
				}
			}
		}
		int LINE = line7;
		void gotoXY(int columns, int lines);
		gotoXY(column7, LINE);
		const int COLUMN = column7;
		cout << "Player's field" << endl;
		LINE++; gotoXY(COLUMN, LINE);
		cout << "12345678910" << endl;
		FILE << "RESPUBLICA" << endl;
		HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
		void gotoXY(int columns, int lines);
		for (int i = 0; i < N; i++, cout << " " << counter1, FILE << " " << counter1, counter1++, FILE << "\n", cout << "\n"){            //???? ? ???? ????????, ?? ????????? ? ????;
			void gotoXY(int columns, int lines);
			LINE++; gotoXY(COLUMN, LINE);
			for (int j = 0; j < M; j++){
				if (CharTemp[i][j] == char(88)) SetConsoleTextAttribute(hConsole, (WORD)((15 << 4) | 12));
				else SetConsoleTextAttribute(hConsole, (WORD)((15 << 4) | 0));
					FILE << CharTemp[i][j];
					cout << CharTemp[i][j];
			}
		}
		LINE = line7;
		FILE << "\n\n";
		cout << "\n" << endl;
		FILE.close();
	}

	
	virtual bool EndCheck(){ //???????? ?? ????? ????
		if (10 == END) { void gotoXY(int columns, int lines); gotoXY(30, 30); cout << "Computer win!" << endl; return true; }  //???? ??????? ??? ???????, ?? ????????? ?????????
		else return false;
	}

	~Comp(){}
};


int main(){
	system("color F0");
	system("mode con cols=100 lines=50");
	srand((unsigned)time(NULL));
	Ship A(5, 4);      //??????? 2 ???? - ???? ??? ?????, ?????? ??? ??????. ??????????? ???????? ???????? ????? ? ??????? ??? gotoXY();
	Ship Computer(25, 20);
//	Ship *Pointer;
	int ShipPlayer[N][M];  //??????? ??? ???????? ? ?????? ??? ????
	int ShipComputer[N][M]; 
	int Choise;
	cout << "If you want to create the field, press 1, if you want to avtomatically fill the field, press 2" << endl;
	cin >> Choise;
		switch (Choise){
		case 1: system("cls"); A.MainHandle(); A.ReturnField(ShipPlayer); break; //??????? ????, ????????? ???? ? ?????? ??? ?????? break;
		case 2: system("cls"); A.MainFunk();	A.PaintField();					//??????? ?? ????? ???? ?????? ???????????
			A.ReturnField(ShipPlayer); break; //??????? ????, ????????? ???? ? ?????? ??? ??????   break;
		default: cout << "Wrong data!" << endl; return 0;
		}

	Computer.MainFunk();
	Computer.ReturnField(ShipComputer); //?? ?? ??? ??????????
	Player A1(ShipComputer, 25, 5);  //?????? ??? ?????? - 1? ????? - ???? ?????, ?? ??? ????? ????????, 2 ? 3? - ?????????? ??? ?????? ?? ?????
	Comp B1(ShipPlayer, 45, 5);     //?????? ??? ?????????? ? ??????? ? ???? ??????.
	for (;;){    
		system("cls");
		A.PrintField();			   //??????? ?? ????? ???? ??????????;
		B1.CompField();			//??????? ?? ????? ???? ??????(???????!)
		A1.Game();				// ??? ??????
		B1.Game();				//??? ????
		if (A1.EndCheck()) break;   //???? ???? ???????????, ???? ? ?????.
		if (B1.EndCheck()) break;
	}
	
	return 0;
}